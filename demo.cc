#include "IF_CONSTEXPR.hh"
#include "IF_CONSTEXPR_ALL.hh"

#include <cassert>
#include <iostream>

int main() {
    int a=3;
    int b=4;
    int c=5;

    // First, demostrate the macro-free implementation. The structure
    // of these two statements look pretty strange, but it makes sense
    // as this is what is generated by the macros.

    std::cout
        <<  forward_as_tuple_for_if_constexpr(a,b)
            .if_constexpr(
                    std::integral_constant<bool, true>{}
                ,   [&](auto&&a,auto&&b){ return a*b;    }  // returns '12'
                ,   [&](auto&&a,auto&&b){ return a(b);   }  // branch not taken
               )
        <<'\n'; // prints '12'
    std::cout
        <<  forward_as_tuple_for_if_constexpr(a,b)
            .if_constexpr(
                    std::integral_constant<bool, false>{}
                ,   [&](auto&&a,auto&&b){ return a(b);   }  // branch not taken
                ,   [&](auto&&a,auto&&b){ return a+b;    }  // returns '7'
               )
        <<'\n'; // prints '7'

    // Next, the demonstrations of the IF_CONSTEXPR macro

    std:: cout <<    IF_CONSTEXPR    (       true,
           a*b                      // returns 12
    )(
           a+b                      // branch not taken
    )
    << '\n';                        // prints '12'
    std:: cout <<    IF_CONSTEXPR    ( a,    false,
           a(b)                     // branch not taken
    )(
           a+b                      // returns 7
    )
    << '\n';                        // prints '7'
    std:: cout <<    IF_CONSTEXPR    ( a,b,c,  true,
           a*b*c                    // returns 60
    )(
           a(b) + c + b(a)          // branch not taken
    )
    << '\n';                        // prints '60'


    std:: cout << '\n';

    std:: cout <<
        IF_CONSTEXPR_ALL( a,b )(true )( a+b )( a (b))
    << '\n';
    std:: cout <<
        IF_CONSTEXPR_ALL( a,b )(false)( a (b))( a*b )
    << '\n';

    auto && refa = IF_CONSTEXPR_ALL( a,b )(true )( a )( b(a));
    assert(&refa == &a);
    auto && refb = IF_CONSTEXPR_ALL( a,b )(false )( a )( b);
    assert(&refb == &b);
}
